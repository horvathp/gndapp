#ifndef SYNCPACKET_H
#define SYNCPACKET_H

#include "../utilities/common.h"
#include <QByteArray>
#include <utility>

namespace s1sync {

    // Sync packet content generated by Levente Dud√°s
    // Bit count: 512 (64 byte)
    // D flip-flop initial content: 0x1E9, XOR gates mask: 0x1CB
    // PSL (peak side lobe level): 28.2 dB
    static unsigned char syncBytes[] = {
        0x97,
        0xfd,
        0xd3,
        0x7b,
        0x0f,
        0x1f,
        0x6d,
        0x08,
        0xf7,
        0x83,
        0x5d,
        0x9e,
        0x59,
        0x82,
        0xc0,
        0xfd,
        0x1d,
        0xca,
        0xad,
        0x3b,
        0x5b,
        0xeb,
        0xd4,
        0x93,
        0xe1,
        0x4a,
        0x04,
        0xd2,
        0x28,
        0xdd,
        0xf9,
        0x01,
        0x53,
        0xd2,
        0xe6,
        0x6c,
        0x5b,
        0x25,
        0x65,
        0x31,
        0xc5,
        0x7c,
        0xe7,
        0xf1,
        0x38,
        0x61,
        0x2d,
        0x5c,
        0x03,
        0x3a,
        0xc6,
        0x88,
        0x90,
        0xdb,
        0x8c,
        0x8c,
        0x42,
        0xf3,
        0x51,
        0x75,
        0x43,
        0xa0,
        0x83,
        0x93,
    };

    static constexpr unsigned int syncPacketLength = sizeof(syncBytes) + 6;

    static QByteArray syncQBArray(reinterpret_cast<char *>(syncBytes), sizeof(syncBytes));

    enum class OperatingMode { Receive, AO40Short, AO40, RA_128_to_260, RA_256_to_514, RA_512_to_1028, RA_1024_to_2050, RA_2048_to_4100, Invalid };

    /**
     * @brief Decodes \p packet as a sync packet
     * @param packet The packet to decode as a sync packet
     * @return A pair describing the result of the decoding process
     */
    const std::pair<unsigned int, OperatingMode> getSyncContents(QByteArray packet);

    /**
     * @brief Returns the QString representation of the particular OperatingMode in \p opmode
     * @param opmode The operating mode
     * @return The QString representing \p opmode
     */
    const QString operatingModeToQString(OperatingMode opmode);

    /**
     * @brief Returns whether \p byte 's bits are mostly 1
     * @param byte the char (byte) to check for 1 majority
     * @return True if there are more than four 1's in \p byte
     */
    inline bool oneMajority(char byte) {
        return count_ones(static_cast<uint8_t>(byte)) > 4;
    }

    /**
     * @brief shouldAccept Returns true if \p packet starts with syncBytes (at least one third matches)
     * @param packet The packet to check
     * @return True if at least one third of the start of the packet matches syncBytes
     */
    inline bool shouldAccept(QByteArray packet) {
        unsigned int sqbl = static_cast<unsigned int>(syncQBArray.length());
        if (static_cast<unsigned int>(packet.length()) < sqbl) {
            return false;
        }
        auto data = packet.left(static_cast<int>(sqbl));
        unsigned int matches = 0;
        for (unsigned int i = 0; i < sqbl; i++) {
            auto xored = data[i] ^ syncQBArray[i];
            matches += (8 - count_ones(static_cast<uint8_t>(xored)));
        }
        return matches >= ((sqbl * 8) / 3);
    }

} // namespace s1sync

#endif // SYNCPACKET_H
